{
  "questions": {
    "easy": [
      {
        "id": "e1",
        "question": "What is the output of: console.log(typeof [])?",
        "options": [
          "array",
          "object",
          "undefined",
          "null"
        ],
        "correctAnswer": "object",
        "explanation": "In JavaScript, arrays are actually objects. The typeof operator returns 'object' for arrays."
      },
      {
        "id": "e2",
        "question": "Which method is used to add elements to the end of an array?",
        "options": [
          "push()",
          "unshift()",
          "pop()",
          "append()"
        ],
        "correctAnswer": "push()",
        "explanation": "The push() method adds one or more elements to the end of an array and returns the new length."
      },
      {
        "id": "e3",
        "question": "What is the result of 2 + '2' in JavaScript?",
        "options": [
          "4",
          "22",
          "NaN",
          "Error"
        ],
        "correctAnswer": "22",
        "explanation": "When adding a number and a string, JavaScript converts the number to a string and performs string concatenation."
      },
      {
        "id": "e4",
        "question": "How do you declare a constant variable in JavaScript?",
        "options": [
          "var",
          "let",
          "const",
          "constant"
        ],
        "correctAnswer": "const",
        "explanation": "The const keyword is used to declare variables that cannot be reassigned after initialization."
      },
      {
        "id": "e5",
        "question": "Which operator is used for strict equality comparison?",
        "options": [
          "==",
          "===",
          "=",
          "!="
        ],
        "correctAnswer": "===",
        "explanation": "The === operator checks both value and type equality without performing type coercion."
      }
    ],
    "medium": [
      {
        "id": "m1",
        "question": "What is the difference between let and var in JavaScript?",
        "options": [
          "No difference",
          "let is block-scoped, var is function-scoped",
          "var is block-scoped, let is function-scoped",
          "let is only for constants"
        ],
        "correctAnswer": "let is block-scoped, var is function-scoped",
        "explanation": "let introduces block scope, while var is function-scoped and can be accessed outside blocks within a function."
      },
      {
        "id": "m2",
        "question": "What will be the output of: console.log([] == false)?",
        "options": [
          "false",
          "true",
          "undefined",
          "TypeError"
        ],
        "correctAnswer": "true",
        "explanation": "Due to type coercion, both [] and false are converted to numbers (0) before comparison."
      },
      {
        "id": "m3",
        "question": "What is the purpose of the Promise object?",
        "options": [
          "To handle synchronous operations",
          "To handle asynchronous operations",
          "To store global variables",
          "To create loops"
        ],
        "correctAnswer": "To handle asynchronous operations",
        "explanation": "Promises are used to handle asynchronous operations and provide better handling of callbacks."
      },
      {
        "id": "m4",
        "question": "What is event delegation in JavaScript?",
        "options": [
          "Direct event handling",
          "Removing event listeners",
          "Handling events at a higher level in the DOM",
          "Creating custom events"
        ],
        "correctAnswer": "Handling events at a higher level in the DOM",
        "explanation": "Event delegation is a technique of handling events at a higher level in the DOM tree for better performance and dynamic elements."
      },
      {
        "id": "m5",
        "question": "What is the output of: console.log(typeof NaN)?",
        "options": [
          "undefined",
          "object",
          "number",
          "NaN"
        ],
        "correctAnswer": "number",
        "explanation": "In JavaScript, NaN (Not a Number) is actually of type 'number', which is one of the language's quirks."
      }
    ],
    "hard": [
      {
        "id": "h1",
        "question": "What is the output of: console.log(0.1 + 0.2 === 0.3)?",
        "options": [
          "true",
          "false",
          "undefined",
          "Error"
        ],
        "correctAnswer": "false",
        "explanation": "Due to floating-point precision in JavaScript, 0.1 + 0.2 actually equals 0.30000000000000004."
      },
      {
        "id": "h2",
        "question": "Explain the concept of event bubbling and capture in JavaScript.",
        "options": [
          "Events only bubble up",
          "Events only capture down",
          "Events first capture down, then bubble up",
          "Events occur randomly"
        ],
        "correctAnswer": "Events first capture down, then bubble up",
        "explanation": "DOM events have three phases: capture (down), target, and bubbling (up). Events are first captured down the DOM tree, then bubble up."
      },
      {
        "id": "h3",
        "question": "What is a closure in JavaScript?",
        "options": [
          "A function that has access to variables in its outer scope",
          "A way to close browser windows",
          "A method to end loops",
          "A type of variable declaration"
        ],
        "correctAnswer": "A function that has access to variables in its outer scope",
        "explanation": "A closure is a function that maintains access to variables from its outer scope even after the outer function has returned."
      },
      {
        "id": "h4",
        "question": "What is the output of: console.log(typeof typeof 1)?",
        "options": [
          "number",
          "string",
          "undefined",
          "object"
        ],
        "correctAnswer": "string",
        "explanation": "typeof 1 returns 'number', and typeof 'number' returns 'string' because typeof always returns a string."
      },
      {
        "id": "h5",
        "question": "Explain prototype inheritance in JavaScript.",
        "options": [
          "Objects inherit directly from parent objects",
          "Objects inherit through the prototype chain",
          "Objects don't inherit in JavaScript",
          "Objects only inherit primitive types"
        ],
        "correctAnswer": "Objects inherit through the prototype chain",
        "explanation": "JavaScript objects inherit properties and methods through a prototype chain, where each object has an internal link to another object called its prototype."
      }
    ]
  }
}
